# FUNCTION
- ifte(inp, cnd, then, else)
(i => i>10? i:10)(i)

not
and
or

- object.from(keys, values, deep=false) // zipObject(Deep)
- object.fromentries
- array.symmetricDifference
- array.difference
- array.union
- array.intersection

- cut
- foldl
- foldr
- scanl
- scanr
- intercalate
- intersperse
- nubOn
- partition
- remove$
- split
- unfoldr
- typescript
- rust (wasm)
- number.modp
- isDisjoint(x, y)
- frequency(x, v)
- max(x, fcmp)
- min(x, fcmp)
- shuffle(x, n)
- sortOn -> sort (unified possible?)
- containsAll (subset) Java
- removeAll (coll) Java
- retainAll (coll) Java

// operation match function
// https://www.npmjs.com/package/is-array-uniq
// https://github.com/w3nl/array-helpers
// https://github.com/flejz/array-reducer

- nub
- chunk by size
- split by cond
- break into n
- break into 2
- group into 2
- group into n
- string splice https://www.npmjs.com/package/splice-string
- move https://www.npmjs.com/package/array-move https://www.npmjs.com/package/immutable-array-methods


####################################


add to Array on demand
add to Array prototype on demand

find functions

cons
uncons
intersperse
intercalate
transpose
foldl1
foldr1
dropWhileEnd
insert
delete
sortOn
union
intersect
difference
group
break
span
dropWhileEnd
splitAt
unfoldr

remove
xor
xorBy
xorWith
zipObject
zipObjectDeep


Standard utility methods for [Array].<br>
Browserified, minified module: [extra-array.min].

```javascript
const Array = require('extra-array');
// Array.is(<value>)
// Array.equal(<array-1>, <array-2>)
// ...
```

Datatype methods:
- [is](https://www.npmjs.com/package/@extra-array/is)

About methods:
- [equal](https://www.npmjs.com/package/@extra-array/equal)
- [first](https://www.npmjs.com/package/@extra-array/first)
- [middle](https://www.npmjs.com/package/@extra-array/middle)
- [last](https://www.npmjs.com/package/@extra-array/last)
- [values](https://www.npmjs.com/package/@extra-array/values)

Generate methods:
- [ensure](https://www.npmjs.com/package/@extra-array/ensure)
- [arange](https://www.npmjs.com/package/@extra-array/arange)
- [linspace](https://www.npmjs.com/package/@extra-array/linspace)
- [fromEntries](https://www.npmjs.com/package/@extra-array/from-entries)
- [fromLists](https://www.npmjs.com/package/@extra-array/from-lists)

Search methods:
- [indexOf](https://www.npmjs.com/package/@extra-array/index-of)
- [indicesOf](https://www.npmjs.com/package/@extra-array/indices-of)
- [lastIndexOf](https://www.npmjs.com/package/@extra-array/last-index-of)
- [includes](https://www.npmjs.com/package/@extra-array/includes)
- [includesOnly](https://www.npmjs.com/package/@extra-array/includes-only)
- [binarySearch](https://www.npmjs.com/package/@extra-array/binary-search)
- [binarySearch.closest](https://www.npmjs.com/package/@extra-array/binary-search.closest)
- [binarySearch.first](https://www.npmjs.com/package/@extra-array/binary-search.first)
- [binarySearch.last](https://www.npmjs.com/package/@extra-array/binary-search.last)
- [contains](https://www.npmjs.com/package/@extra-array/contains)
- [count](https://www.npmjs.com/package/@extra-array/count)
- [countAll](https://www.npmjs.com/package/@extra-array/count-all)

Transform methods:
- [join](https://www.npmjs.com/package/@extra-array/join)
- [pick](https://www.npmjs.com/package/@extra-array/pick)
- [pickAs](https://www.npmjs.com/package/@extra-array/pick-as)
- [slice](https://www.npmjs.com/package/@extra-array/slice)
- [copy](https://www.npmjs.com/package/@extra-array/copy)
- [move](https://www.npmjs.com/package/@extra-array/move)
- [compact](https://www.npmjs.com/package/@extra-array/compact)
- [unique](https://www.npmjs.com/package/@extra-array/unique)
- [fill](https://www.npmjs.com/package/@extra-array/fill)
- [reverse](https://www.npmjs.com/package/@extra-array/reverse)
- [sort](https://www.npmjs.com/package/@extra-array/sort)
- [sortIndex](https://www.npmjs.com/package/@extra-array/sort-index)
- [zip](https://www.npmjs.com/package/@extra-iterable/zip)
- [unzip](https://www.npmjs.com/package/@extra-iterable/zip)
- [zipObject](https://www.npmjs.com/package/@extra-array/zip-object)
- [append](https://www.npmjs.com/package/@extra-array/append)
- [repeat](https://www.npmjs.com/package/@extra-array/repeat)

Functional methods:
- [forEach](https://www.npmjs.com/package/@extra-array/for-each)
- [some](https://www.npmjs.com/package/@extra-array/some)
- [every](https://www.npmjs.com/package/@extra-array/every)
- [find](https://www.npmjs.com/package/@extra-array/find)
- [findIndex](https://www.npmjs.com/package/@extra-array/find-index)
- [findAll](https://www.npmjs.com/package/@extra-array/find-all)
- [findAllIndices](https://www.npmjs.com/package/@extra-array/find-all-indices)
- [reduce](https://www.npmjs.com/package/@extra-array/reduce)
- [filter](https://www.npmjs.com/package/@extra-array/filter)
- [map](https://www.npmjs.com/package/@extra-array/map)

Evaluate methods:
- [any](https://www.npmjs.com/package/@extra-array/any)
- [all](https://www.npmjs.com/package/@extra-array/all)
- [max](https://www.npmjs.com/package/@extra-array/max)
- [min](https://www.npmjs.com/package/@extra-array/min)
- [sum](https://www.npmjs.com/package/@extra-array/sum)
- [average](https://www.npmjs.com/package/@extra-array/average)
- [hammingDistance](https://www.npmjs.com/package/@extra-array/hamming-distance)
- [euclideanDistance](https://www.npmjs.com/package/@extra-array/euclidean-distance)
