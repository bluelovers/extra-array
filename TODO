# FUNCTION
- ifte(inp, cnd, then, else)
(i => i>10? i:10)(i)

- object.from(keys, values, deep=false) // zipObject(Deep)
- object.fromentries

- number.modp
- searchOn?
- isEqualOn?
- compareOn?
X flatten
- random(length, generator<->seed)
- random

- max (elm)
- min
- sample
- choose
- shuffle update to use Fisher-Yates algorithm
- function.iterate
- product/cartesianProduct
- interweave/interleave
- intercalate? intersperse?
- select
X isUnique/allDifferent/allDifferentBy(elm)
- permutation? subsequence? prefix infix suffix


// operation match function
XX https://www.npmjs.com/package/is-array-uniq
// https://github.com/w3nl/array-helpers
// https://github.com/flejz/array-reducer

- string splice https://www.npmjs.com/package/splice-string
- move https://www.npmjs.com/package/array-move
- https://www.npmjs.com/package/immutable-array-methods
- https://www.npmjs.com/package/unique-random-array


####################################

zipObject
zipObjectDeep
